import { 
  collection, 
  doc, 
  setDoc, 
  getDocs, 
  query, 
  where 
} from 'firebase/firestore';
import { db } from '../firebase/config';

// Default categories for the forum
const defaultCategories = [
  {
    id: 'news-competitions',
    name: '–ù–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è',
    description: '–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –±–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥–∞, –ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥–∞ –∏ –¥—Ä—É–≥–∏—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞. –ê–Ω–æ–Ω—Å—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.',
    slug: 'news-competitions',
    orderIndex: 1,
    isActive: true
  },
  {
    id: 'beginners',
    name: '–ù–æ–≤–∏—á–∫–∞–º',
    description: '–†–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Ö–µ–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤',
    slug: 'beginners',
    orderIndex: 2,
    isActive: true
  },
  {
    id: 'nutrition',
    name: '–ü–∏—Ç–∞–Ω–∏–µ',
    description: '–í—Å–µ –æ –ø–∏—Ç–∞–Ω–∏–∏ –≤ –±–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥–µ, –¥–∏–µ—Ç—ã, —Ä–µ—Ü–µ–ø—Ç—ã',
    slug: 'nutrition',
    orderIndex: 3,
    isActive: true
  },
  {
    id: 'sports-nutrition',
    name: '–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ',
    description: '–ü—Ä–æ—Ç–µ–∏–Ω—ã, –≥–µ–π–Ω–µ—Ä—ã, –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç—ã, –∫—Ä–µ–∞—Ç–∏–Ω –∏ –¥—Ä—É–≥–∏–µ –¥–æ–±–∞–≤–∫–∏',
    slug: 'sports-nutrition',
    orderIndex: 4,
    isActive: true
  },
  {
    id: 'pharmacology',
    name: '–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è',
    description: '–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –≤ —Å–ø–æ—Ä—Ç–µ',
    slug: 'pharmacology',
    orderIndex: 5,
    isActive: true
  },
  {
    id: 'training',
    name: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
    description: '–ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –º–µ—Ç–æ–¥–∏–∫–∏, —Ç–µ—Ö–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π',
    slug: 'training',
    orderIndex: 6,
    isActive: true
  }
];

// Initialize Firestore with default data
export const initializeFirestore = async () => {
  try {
    console.log('üî• Initializing Firestore database...');
    
    // Check if categories already exist
    const categoriesRef = collection(db, 'categories');
    const existingCategoriesQuery = query(categoriesRef, where('isActive', '==', true));
    const existingCategoriesSnapshot = await getDocs(existingCategoriesQuery);
    
    if (existingCategoriesSnapshot.empty) {
      console.log('üìù Creating default categories...');
      
      // Create default categories
      for (const category of defaultCategories) {
        const categoryRef = doc(db, 'categories', category.id);
        await setDoc(categoryRef, {
          ...category,
          createdAt: new Date(),
          updatedAt: new Date()
        });
        console.log(`‚úÖ Created category: ${category.name}`);
      }
      
      console.log('üéâ Firestore initialization complete!');
    } else {
      console.log('‚úÖ Firestore already initialized with categories');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Error initializing Firestore:', error);
    return false;
  }
};

// Function to create a sample topic for testing
export const createSampleTopic = async (userId: string, userName: string, userEmail: string) => {
  try {
    console.log('üìù Creating sample topic...');
    
    const sampleTopicRef = doc(collection(db, 'topics'));
    await setDoc(sampleTopicRef, {
      categoryId: 'beginners',
      userId,
      userName,
      userEmail,
      title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ñ–æ—Ä—É–º!',
      content: `–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! 

–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Ç–µ–º–∞ –Ω–∞ –Ω–∞—à–µ–º —Ñ–æ—Ä—É–º–µ. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:

- –ó–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
- –î–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏  
- –û–±—Å—É–∂–¥–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–∫–∏
- –ù–∞—Ö–æ–¥–∏—Ç—å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ! üí™`,
      mediaLinks: [],
      slug: 'welcome-to-forum',
      views: 1,
      likes: 0,
      dislikes: 0,
      isPinned: true,
      isLocked: false,
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
      lastPostAt: new Date(),
      replyCount: 0
    });
    
    console.log('‚úÖ Sample topic created!');
    return sampleTopicRef.id;
  } catch (error) {
    console.error('‚ùå Error creating sample topic:', error);
    return null;
  }
};

// Check Firestore connection
export const testFirestoreConnection = async () => {
  try {
    const testRef = collection(db, 'test');
    await getDocs(testRef);
    console.log('‚úÖ Firestore connection successful');
    return true;
  } catch (error) {
    console.error('‚ùå Firestore connection failed:', error);
    return false;
  }
};
