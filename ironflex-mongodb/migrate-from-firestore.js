/**
 * Migration script from Firestore to MongoDB
 * 
 * This script helps migrate your existing Firestore data to MongoDB
 * Run this after setting up your MongoDB database
 */

const mongoose = require('mongoose')
require('dotenv').config({ path: '.env.local' })

// Define models directly (since we can't import TypeScript modules in JS)
const UserSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true, lowercase: true },
  username: { type: String, required: true, unique: true, trim: true },
  passwordHash: { type: String, required: true },
  displayName: { type: String, trim: true },
  photoURL: { type: String },
  bio: { type: String, maxlength: 500 },
  isActive: { type: Boolean, default: true },
  isAdmin: { type: Boolean, default: false },
  lastLogin: { type: Date }
}, { timestamps: true })

const CategorySchema = new mongoose.Schema({
  name: { type: String, required: true, trim: true },
  description: { type: String, trim: true },
  slug: { type: String, required: true, unique: true, lowercase: true, trim: true },
  orderIndex: { type: Number, default: 0 },
  isActive: { type: Boolean, default: true }
}, { timestamps: true })

const TopicSchema = new mongoose.Schema({
  categoryId: { type: String, required: true },
  userId: { type: String, required: true },
  userName: { type: String, required: true },
  userEmail: { type: String, required: true },
  title: { type: String, required: true, trim: true, maxlength: 255 },
  content: { type: String, required: true },
  mediaLinks: [{ type: String }],
  views: { type: Number, default: 0 },
  likes: { type: Number, default: 0 },
  dislikes: { type: Number, default: 0 },
  isPinned: { type: Boolean, default: false },
  isLocked: { type: Boolean, default: false },
  isActive: { type: Boolean, default: true },
  lastPostAt: { type: Date, default: Date.now },
  replyCount: { type: Number, default: 0 }
}, { timestamps: true })

const PostSchema = new mongoose.Schema({
  topicId: { type: String, required: true },
  userId: { type: String, required: true },
  userName: { type: String, required: true },
  userEmail: { type: String, required: true },
  content: { type: String, required: true },
  mediaLinks: [{ type: String }],
  likes: { type: Number, default: 0 },
  dislikes: { type: Number, default: 0 },
  isEdited: { type: Boolean, default: false },
  editedAt: { type: Date },
  isActive: { type: Boolean, default: true },
  parentPostId: { type: String }
}, { timestamps: true })

// Create models
const User = mongoose.model('User', UserSchema)
const Category = mongoose.model('Category', CategorySchema)
const Topic = mongoose.model('Topic', TopicSchema)
const Post = mongoose.model('Post', PostSchema)

async function migrateData() {
  try {
    console.log('üîÑ Starting migration from Firestore to MongoDB...')
    
    // Connect to MongoDB
    await mongoose.connect(process.env.MONGODB_URI)
    console.log('‚úÖ Connected to MongoDB')

    // 1. Create default categories (matching your Firestore structure)
    console.log('üìù Creating default categories...')
    const defaultCategories = [
      {
        name: '–ù–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è',
        description: '–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –±–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥–∞, –ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥–∞ –∏ –¥—Ä—É–≥–∏—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞.',
        slug: 'news-competitions',
        orderIndex: 1
      },
      {
        name: '–ù–æ–≤–∏—á–∫–∞–º',
        description: '–†–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Ö–µ–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤',
        slug: 'beginners',
        orderIndex: 2
      },
      {
        name: '–ü–∏—Ç–∞–Ω–∏–µ',
        description: '–í—Å–µ –æ –ø–∏—Ç–∞–Ω–∏–∏ –≤ –±–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥–µ, –¥–∏–µ—Ç—ã, —Ä–µ—Ü–µ–ø—Ç—ã',
        slug: 'nutrition',
        orderIndex: 3
      },
      {
        name: '–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ',
        description: '–ü—Ä–æ—Ç–µ–∏–Ω—ã, –≥–µ–π–Ω–µ—Ä—ã, –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç—ã, –∫—Ä–µ–∞—Ç–∏–Ω –∏ –¥—Ä—É–≥–∏–µ –¥–æ–±–∞–≤–∫–∏',
        slug: 'sports-nutrition',
        orderIndex: 4
      },
      {
        name: '–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è',
        description: '–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –≤ —Å–ø–æ—Ä—Ç–µ',
        slug: 'pharmacology',
        orderIndex: 5
      },
      {
        name: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        description: '–ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –º–µ—Ç–æ–¥–∏–∫–∏, —Ç–µ—Ö–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π',
        slug: 'training',
        orderIndex: 6
      }
    ]

    for (const categoryData of defaultCategories) {
      const existingCategory = await Category.findOne({ slug: categoryData.slug })
      if (!existingCategory) {
        await Category.create(categoryData)
        console.log(`‚úÖ Created category: ${categoryData.name}`)
      } else {
        console.log(`‚ö†Ô∏è  Category already exists: ${categoryData.name}`)
      }
    }

    console.log('üéâ Migration completed successfully!')
    console.log('')
    console.log('üìã Next steps:')
    console.log('1. Export your Firestore data manually')
    console.log('2. Transform the data to match MongoDB schema')
    console.log('3. Import users, topics, and posts using MongoDB tools')
    console.log('4. Update your frontend to use the new API endpoints')
    console.log('')
    console.log('üîó Useful commands:')
    console.log('- mongoexport: Export from Firestore')
    console.log('- mongoimport: Import to MongoDB')
    console.log('- MongoDB Compass: Visual data management')

  } catch (error) {
    console.error('‚ùå Migration failed:', error)
  } finally {
    await mongoose.disconnect()
    console.log('üîå Disconnected from MongoDB')
  }
}

// Run migration if this file is executed directly
if (require.main === module) {
  migrateData()
}

module.exports = { migrateData }
